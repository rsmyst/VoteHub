// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String // Hashed password
  name         String?
  role         Role          @default(USER)
  polls        Poll[]
  comments     Comment[]
  votes        Vote[]
  activityLogs ActivityLog[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Poll {
  id           String            @id @default(uuid())
  title        String
  description  String?
  creator      User              @relation(fields: [creatorId], references: [id])
  creatorId    String
  isPublic     Boolean           @default(true)
  roomCode     String?           @unique // 6 digit code for private polls
  status       PollStatus        @default(ACTIVE)
  options      Option[]
  votes        Vote[]
  comments     Comment[]
  categories   PollCategory[]
  participants PollParticipant[]
  activityLogs ActivityLog[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

enum PollStatus {
  ACTIVE
  CLOSED
}

model Option {
  id     String @id @default(uuid())
  text   String
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  votes  Vote[]
}

model Vote {
  id        String   @id @default(uuid())
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId    String
  option    Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId  String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  session   Session? @relation(fields: [sessionId], references: [id])
  sessionId String?
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Category {
  id    String         @id @default(uuid())
  name  String         @unique
  polls PollCategory[]
}

model PollCategory {
  poll       Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId     String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  @@id([pollId, categoryId])
}

model ActivityLog {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  poll      Poll?    @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId    String?
  action    String
  createdAt DateTime @default(now())
}

model PollParticipant {
  id          String            @id @default(uuid())
  poll        Poll              @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId      String
  email       String
  status      ParticipantStatus @default(PENDING)
  invitedAt   DateTime          @default(now())
  respondedAt DateTime?
}

enum ParticipantStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Session {
  id        String   @id @default(uuid())
  votes     Vote[]
  createdAt DateTime @default(now())
  expiresAt DateTime
}
